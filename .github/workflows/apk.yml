name: Build APK (Manual Trigger)

on:
  workflow_dispatch:
    inputs:
      app_version_name:
        description: 'App Version Name (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
      app_version_code:
        description: 'App Version Code (integer, e.g., 1)'
        required: true
        default: '1'

jobs:
  build-apk:
    name: Build APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Bubblewrap CLI
        run: npm i -g @bubblewrap/cli

      - name: Set up JDK 17
        id: setup_jdk
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Pre-create Bubblewrap config with JDK path
        run: |
          echo "Manually creating Bubblewrap config directory and file..."
          CONFIG_DIR=~/.bubblewrap
          CONFIG_FILE=$CONFIG_DIR/config.json
          mkdir -p "$CONFIG_DIR"
          # Create config.json with only the jdkPath.
          # Ensure JAVA_HOME is correctly escaped if it could contain special characters, though unlikely for this path.
          echo "{ \"jdkPath\": \"$JAVA_HOME\" }" > "$CONFIG_FILE"
          echo "Bubblewrap config.json created with JDK path."
          echo "Contents of ~/.bubblewrap/config.json:"
          cat "$CONFIG_FILE"
          echo "----------------------------------------"

      - name: Verify Bubblewrap Configuration (Doctor - for diagnostics)
        # This step attempts to run 'bubblewrap doctor'.
        # With jdkPath in config.json, it should find the JDK.
        # It will likely then prompt for Android SDK installation. We pipe 'y'.
        # We use '|| true' to prevent the workflow failing if doctor itself has a non-zero exit
        # (e.g., after starting SDK download or if it still finds an issue).
        run: |
          echo "Running bubblewrap doctor (piping 'y' for potential Android SDK install)..."
          (echo "y" | bubblewrap doctor) || echo "Bubblewrap doctor finished (command may have exited non-zero)."
          echo "Contents of ~/.bubblewrap/config.json after doctor (to see if androidSdkPath was added):"
          cat ~/.bubblewrap/config.json || echo "~/.bubblewrap/config.json not found or unreadable."
          echo "----------------------------------------"
          # Optional: Pause if SDK download by doctor happens in background. Unlikely needed.
          # echo "Pausing briefly..." && sleep 15

      - name: Decode and Restore Keystore
        run: |
          echo "Restoring keystore..."
          echo "${{ secrets.ANDROID_SIGNING_KEYSTORE_BASE64 }}" | base64 --decode > android.keystore
          echo "Keystore restored to android.keystore"

      - name: Build APK with Bubblewrap
        id: build_apk
        run: |
          APP_VERSION_NAME="${{ github.event.inputs.app_version_name }}"
          APP_VERSION_CODE="${{ github.event.inputs.app_version_code }}"

          echo "Building APK for version ${APP_VERSION_NAME} (code ${APP_VERSION_CODE})"
          echo "Piping 'y' to bubblewrap build for anticipated Android SDK installation prompt..."

          # With jdkPath in config.json, Bubblewrap should find JDK and only ask to install Android SDK.
          echo "y" | bubblewrap build \
            --manifest ./twa-manifest.json \
            # --noJdkInstall should be redundant if config.json is respected for JDK
            --signingKeyPath ./android.keystore \
            --signingKeyAlias "${{ secrets.ANDROID_KEY_ALIAS }}" \
            --signingKeyPassword "${{ secrets.ANDROID_KEY_PASSWORD }}" \
            --keystorePassword "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" \
            --appVersionName "${APP_VERSION_NAME}" \
            --appVersionCode "${APP_VERSION_CODE}" \
            --skipPwaValidation

          APK_PATH="./app-release-signed.apk"
          ARTIFACT_FILENAME="YourAppName-${APP_VERSION_NAME}-code${APP_VERSION_CODE}.apk"
          echo "apk_path=${APK_PATH}" >> $GITHUB_OUTPUT
          echo "artifact_filename=${ARTIFACT_FILENAME}" >> $GITHUB_OUTPUT

      - name: Upload APK as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: signed-apk-${{ github.event.inputs.app_version_name }}
          path: ${{ steps.build_apk.outputs.apk_path }}
          if-no-files-found: error