name: Build APK (Manual Trigger)

on:
  workflow_dispatch:
    inputs:
      app_version_name:
        description: 'App Version Name (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
      app_version_code:
        description: 'App Version Code (integer, e.g., 1)'
        required: true
        default: '1'

jobs:
  build-apk:
    name: Build APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Or your preferred LTS version

      - name: Install Bubblewrap CLI
        run: npm i -g @bubblewrap/cli

      - name: Set up JDK 17
        id: setup_jdk
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Configure Bubblewrap with JDK Path
        run: |
          echo "Configuring Bubblewrap with JDK at: $JAVA_HOME"
          # Use the JAVA_HOME set by actions/setup-java
          bubblewrap updateConfig --jdkPath "$JAVA_HOME"
          # We don't need to set androidSdkPath if Bubblewrap can download it,
          # or if the runner has one, Bubblewrap might find it or download its own.
          # If Android SDK also becomes an issue, we'd add --androidSdkPath here too.
          echo "Bubblewrap configuration updated."

      - name: Verify Bubblewrap Configuration (Doctor)
        run: |
          echo "Running bubblewrap doctor..."
          bubblewrap doctor
          echo "Contents of Bubblewrap config file:"
          cat ~/.bubblewrap/config.json || echo "config.json not found or cat failed"

      - name: Decode and Restore Keystore
        run: |
          echo "Restoring keystore..."
          echo "${{ secrets.ANDROID_SIGNING_KEYSTORE_BASE64 }}" | base64 --decode > android.keystore
          echo "Keystore restored to android.keystore"

      - name: Build APK with Bubblewrap
        id: build_apk
        run: |
          APP_VERSION_NAME="${{ github.event.inputs.app_version_name }}"
          APP_VERSION_CODE="${{ github.event.inputs.app_version_code }}"

          echo "Building APK for version ${APP_VERSION_NAME} (code ${APP_VERSION_CODE})"
          echo "JAVA_HOME for this step is: $JAVA_HOME"

          bubblewrap build \
            --manifest ./twa-manifest.json \
            --noJdkInstall \ # Still good practice to prevent it from trying to download
            # We REMOVE --jdkPath from here, relying on the config.json set by updateConfig
            --signingKeyPath ./android.keystore \
            --signingKeyAlias "${{ secrets.ANDROID_KEY_ALIAS }}" \
            --signingKeyPassword "${{ secrets.ANDROID_KEY_PASSWORD }}" \
            --keystorePassword "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" \
            --appVersionName "${APP_VERSION_NAME}" \
            --appVersionCode "${APP_VERSION_CODE}" \
            --skipPwaValidation

          APK_PATH="./app-release-signed.apk"
          ARTIFACT_FILENAME="YourAppName-${APP_VERSION_NAME}-code${APP_VERSION_CODE}.apk"
          echo "apk_path=${APK_PATH}" >> $GITHUB_OUTPUT
          echo "artifact_filename=${ARTIFACT_FILENAME}" >> $GITHUB_OUTPUT

      - name: Upload APK as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: signed-apk-${{ github.event.inputs.app_version_name }}
          path: ${{ steps.build_apk.outputs.apk_path }}
          if-no-files-found: error