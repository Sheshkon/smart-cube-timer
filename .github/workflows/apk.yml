name: Build APK (Manual Trigger)

on:
  workflow_dispatch:
    inputs:
      app_version_name:
        description: 'App Version Name (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
      app_version_code:
        description: 'App Version Code (integer, e.g., 1)'
        required: true
        default: '1'

jobs:
  build-apk:
    name: Build APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Bubblewrap CLI
        run: npm i -g @bubblewrap/cli

      - name: Set up JDK 17
        id: setup_jdk
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Configure Bubblewrap (answering initial prompts)
        run: |
          echo "Attempting to configure Bubblewrap by answering initial prompts..."
          echo "JAVA_HOME is: $JAVA_HOME"

          # Answer prompts for initial Bubblewrap setup:
          # 1. "No" to installing JDK.
          # 2. Provide path to existing JDK ($JAVA_HOME).
          # 3. "Yes" to installing Android SDK (Bubblewrap will manage this).
          # The `updateConfig` part might be redundant if the prompts fully set up config.json,
          # but we include it to explicitly set the JDK path if the prompts don't fully write it.
          { \
            echo "n"; \
            echo "$JAVA_HOME"; \
            echo "y"; \
          } | bubblewrap updateConfig --jdkPath "$JAVA_HOME"

          echo "Bubblewrap configuration attempt finished."
          echo "----------------------------------------"
          echo "Contents of Bubblewrap config file (if it exists):"
          cat ~/.bubblewrap/config.json || echo "~/.bubblewrap/config.json not found."
          echo "----------------------------------------"

      - name: Verify Bubblewrap Configuration (Doctor)
        run: |
          echo "Running bubblewrap doctor..."
          bubblewrap doctor
          # The doctor command might also trigger prompts if config is still not right.
          # If doctor fails, we may need to pipe answers to it as well,
          # or accept that the Android SDK download will happen here.

      - name: Decode and Restore Keystore
        run: |
          echo "Restoring keystore..."
          echo "${{ secrets.ANDROID_SIGNING_KEYSTORE_BASE64 }}" | base64 --decode > android.keystore
          echo "Keystore restored to android.keystore"

      - name: Build APK with Bubblewrap
        id: build_apk
        run: |
          APP_VERSION_NAME="${{ github.event.inputs.app_version_name }}"
          APP_VERSION_CODE="${{ github.event.inputs.app_version_code }}"

          echo "Building APK for version ${APP_VERSION_NAME} (code ${APP_VERSION_CODE})"

          bubblewrap build \
            --manifest ./twa-manifest.json \
            # --noJdkInstall might be redundant if config is now correct, but harmless.
            --noJdkInstall \
            # We REMOVE --jdkPath from here, relying on the config.json
            --signingKeyPath ./android.keystore \
            --signingKeyAlias "${{ secrets.ANDROID_KEY_ALIAS }}" \
            --signingKeyPassword "${{ secrets.ANDROID_KEY_PASSWORD }}" \
            --keystorePassword "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" \
            --appVersionName "${APP_VERSION_NAME}" \
            --appVersionCode "${APP_VERSION_CODE}" \
            --skipPwaValidation

          APK_PATH="./app-release-signed.apk"
          ARTIFACT_FILENAME="YourAppName-${APP_VERSION_NAME}-code${APP_VERSION_CODE}.apk"
          echo "apk_path=${APK_PATH}" >> $GITHUB_OUTPUT
          echo "artifact_filename=${ARTIFACT_FILENAME}" >> $GITHUB_OUTPUT

      - name: Upload APK as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: signed-apk-${{ github.event.inputs.app_version_name }}
          path: ${{ steps.build_apk.outputs.apk_path }}
          if-no-files-found: error